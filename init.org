#+STARTUP: hidestars indent content
#+TODO: TODO TRY | SLOW NOTE OLD

Updated: <2025-03-05 14:33:22>

* init.org
This file must be tangled into =init.el= in the emacs configuration
directory, =~/init.d/=.

#+BEGIN_SRC emacs-lisp :tangle no :results output silent
;; Tangle this file into init.el, then load it.
;; Output logged in *Messages* buffer
(message
 "Tangled and Loaded!\n  |- %s\n  |- %s\n  |- %s"

 ;; tangled file name
 (car
  (org-babel-tangle-file
   buffer-file-name
   (expand-file-name (concat user-emacs-directory "init.el"))
   "emacs-lisp"))

 ;; date and time of tangle
 (format-time-string "%Y-%m-%d.%H-%M-%S" (current-time))

 ;; load tangled file
 (load (concat user-emacs-directory "init.el")))
#+END_SRC


** TODO Tangle to init.el [0/1]
- [ ] Add prompt before overwriting =init.el=.  OR... just do it and backup old one?

* my/* functions
#+begin_src emacs-lisp :results output silent
;;  -*- lexical-binding: t; -*-
(defun my/now ()
  "Return the current date and time appropriate for placing in Windows file names."
  (interactive)
  (insert-before-markers
   (format-time-string "%Y-%m-%d--%H-%M-%S" (current-time))))


(defun my/use-first-directory (dirlist)
  "Return first valid directory that exists in `dirlist'.  If no directory is valid & exists, return nil.

  `dirlist' is a list of string paths to test with file-exists-p. "
  (catch 'match-found
    (dolist (d dirlist)
      (if (file-exists-p d) (throw 'match-found d)))))


(defun my/display-startup-time ()
  "Output emacs init time duration in seconds (and minutes), number and duration of garbage collections."
  (let ((startup-secs (time-subtract after-init-time before-init-time)))
    (message "Emacs %s loaded in %s (%s). %d garbage collections this session, lasting %s."
             emacs-version
             (format "%.2fs" (float-time startup-secs))
             (format "%.2fmin" (/ (float-time startup-secs) 60.0))
             gcs-done
             (format "%.2fs" gc-elapsed)
             )))


(defun my/log-time-of-op-on-file (op file time-format-str)
  "Call `op' using funcall and pass `file' as parameter. Write times before and after to *Messages."
  (let* ((op-name (upcase (symbol-name op))))
    (message "%s  %s %s"
             (format-time-string time-format-str (current-time))
             op-name
             file)
    (funcall op file)
    (message "%s  %s done."
             (format-time-string time-format-str (current-time))
             op-name)))


(defun my/file-buffer-modtime ()
  "Check if the current buffer is in sync with modifications from
external programs. Return `nil' if current buffer does not point to file."
  (interactive)
  (if (eq nil (buffer-file-name))
    nil
    (let ((file-modtime (format-time-string "%H:%M:%S" (visited-file-modtime))))
      (message "%s"
               (concat
                (buffer-file-name)
                "  [Modified "
                file-modtime
                "]"
                (if (verify-visited-file-modtime)
                    "  - Buffer in sync."
                  "  - Buffer NOT in sync!")
                (if (buffer-modified-p)
                    (concat "  (Unsaved changes: " (symbol-name (buffer-modified-p)) ")")
                  ""))))))


(add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_src

* my/org-* functions

#+begin_src emacs-lisp :results output silent
;; custom elisp

;; Filenames
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html

;; org-mode
;; Reference
;; https://orgmode.org/manual/Using-the-Property-API.html
;; https://orgmode.org/worg/dev/org-element-api.html
;; http://xahlee.info/emacs/emacs/elisp_parse_org_mode.html
;; These currently use properties... org elements offer more detail (if needed)... like headline level?

(defun my/org-timestamp-to-string (orgtimestamp &optional fmt)
  "Take an active or inactive org-timestamp string and format it accordding to fmt.
If fmt is not provided, use '%Y-%m-%d'."
  (let ((fmt (or fmt "%Y-%m-%d")))
      (format-time-string fmt (org-time-string-to-time orgtimestamp))))


(defun my/org-duration-string-to-plantuml-gantt (s)
  "Return 'n days' or 'n weeks' based on `{num}d' or `{num}w' org-effort string `s'.
Return nil if `s' doesn't match expected format."
   (string-match "\\([0-9]+\\)\\([d\\|w]\\)" s)
   (let* (
         (num (match-string 1 s))
         (unit (match-string 2 s))
         (unit-new
          (cond ((equal unit "d") "days")
                ((equal unit "w") "weeks"))))
     (if (and num unit-new)
         (format "%s %s" num unit-new)
       nil)
     ))


(defun my/org-headline-to-plantuml-gantt ()
  "Output PlantUML strings based on the current headline's properties.
Debug messages to *my/debug* buffer.
If only effort but no start (scheduled) or end date (deadline) is present, headline is ignored.
TODO: Provide optional default-date parameter as start or end when effort present?"
  (interactive)
  (let* (
         (headline (org-entry-get nil "ITEM" nil) )
         (startdate (org-entry-get nil "SCHEDULED" nil))
         (enddate (org-entry-get nil "DEADLINE" nil))
         (effort (org-entry-get nil "EFFORT" nil))
       )
    (cond ((and startdate (eq nil enddate) (eq nil effort))
           ;; only startdate is present
           (princ (format "%s %s" headline "*only startdate --> happens on\n") (get-buffer-create "*my/debug*"))
           (princ (format "[%s] happens on %s\n" headline (my/org-timestamp-to-string startdate)))
           )
          ((and enddate (eq nil startdate) (eq nil effort))
           ;; only enddate is present
           (princ (format "%s %s" headline "*only enddate --> happens on\n") (get-buffer-create "*my/debug*"))
           (princ (format "[%s] happens on %s\n" headline (my/org-timestamp-to-string enddate)))
           )
          ((and effort (eq nil startdate) (eq nil enddate))
           ;; only effort is present, ignore or use a default date?
           (princ (format "%s %s" headline "*only effort --> ignoring for gantt\n") (get-buffer-create "*my/debug*")))
          ((and startdate enddate)
           ;; both startdate and enddate are present
           (princ (format "[%s] starts %s\n" headline (my/org-timestamp-to-string startdate)))
           (princ (format "[%s] ends %s\n" headline (my/org-timestamp-to-string enddate)))
          )
          ((and (eq nil startdate) enddate effort)
           ;; startdate missing, enddate and effort present
           (princ (format "[%s] ends %s\n" headline (my/org-timestamp-to-string enddate)))
           (princ (format "[%s] lasts %s\n" headline (my/org-duration-string-to-plantuml-gantt effort)))
          )
          ((and (eq nil enddate) startdate effort)
           ;; enddate missing, startdate and effort present           
           (princ (format "[%s] starts %s\n" headline (my/org-timestamp-to-string startdate)))
           (princ (format "[%s] lasts %s\n" headline (my/org-duration-string-to-plantuml-gantt effort)))
           )
          )

    ;; Below is initial (simpler) one-line per property method
    ;; (when startdate
    ;;   (princ (format "[%s] starts on %s\n" headline (my/org-timestamp-to-string startdate))))
    ;; (when enddate
    ;;   (princ (format "[%s] ends on %s\n" headline (my/org-timestamp-to-string enddate))))
    ;; (when effort
    ;;   (princ (format "[%s] lasts %s\n" headline (my/org-duration-string-to-plantuml-gantt effort))))
   ))


(defun my/org-entries-to-plantuml-gantt ()
  (interactive)
  (org-map-entries 'my/org-headline-to-plantuml-gantt nil nil 'archive 'comment)
  (message "my/org-entries-to-plantuml-gantt complete.")
  )
#+end_src

* Initialize
** OLD package - REQUIRED
CLOSED: [2021-05-27 Thu 09:52]

=(package-initialize)= must come before configurations of installed
packages.

#+BEGIN_SRC emacs-lisp
;; Using defaults from DOOM config https://github.com/hlissner/doom-emacs/wiki/FAQ
(setq gc-cons-threshold 402653184      ; default is 800,000 ... too small!
      gc-cons-percentage 0.6)

;; Do not edit this file.  See "init.org"
;; This file is generated from init.org using org-babel-tangle
(setq package-enable-at-startup nil)
;(package-initialize)

(when (>= emacs-major-version 24)
  (require 'package)
  ;; melpa vs elpa
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize))
#+END_SRC

** use-package
- Used instead of =(require 'pkg-name)= primarily for auto-download.
- https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp :results output silent
;; This is only needed once, near the top of the file
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  ;; (add-to-list 'load-path "<path where use-package is installed>")
  (require 'use-package))                ; we want this instead of 'require

(setq use-package-always-ensure t)      ; ensure package is installed
(setq use-package-verbose t)            ; report config loading time in *Messages*
#+END_SRC


* Private
Load things that should be slightly more private.
#+BEGIN_SRC emacs-lisp :output nil :results output silent
;; ensure init_private.el is loaded
(setq init_private_loaded
      (load
       (concat user-emacs-directory
               "init_private.el")))
;; defines: my/user-dir, my/on-work-pc, my/user-name, my/computer-name, my/org-directory
#+END_SRC


* Emacs - General

** User - name, email
#+BEGIN_SRC emacs-lisp :results output silent
(setq user-full-name "Steven Brown")
(setq user-mail-address "steven.w.j.brown@gmail.com")
#+END_SRC

** Calendar & Diary
#+BEGIN_SRC emacs-lisp
(setq holiday-general-holidays nil)     ; Remove US defaults, add back some later
(setq holiday-christian-holidays nil)   ; Remove a bunch of other holidays we don't need, don't add them back
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-bahai-holidays nil)
(setq holiday-oriental-holidays nil)

;; `calendar-holidays' initialized from multiple *holidays lists.  used in both
;; calendar and org agenda.  Once loaded, `calendar-holidays' must be modified
;; directly.
(setq holiday-local-holidays            ; Canada/BC Holidays
      '((holiday-fixed 1 1 "New Year's Day")
        (holiday-float 2 1 3 "Family Day")
        (holiday-easter-etc -2 "Good Friday")
        (holiday-easter-etc 1 "Easter Monday")
        (holiday-float 5 1 -2 "Victoria Day")
        (holiday-fixed 6 21 "Aboriginal Day")
        (holiday-fixed 7 1 "Canada Day")
        (holiday-float 8 1 1 "BC Day")
        (holiday-float 9 1 1 "Labour Day")
        (holiday-float 10 1 2 "Thanksgiving (Canadian)")
        (holiday-fixed 11 11 "Remembrance Day")
        (holiday-fixed 12 25 "Christmas")
        (holiday-fixed 12 26 "Boxing Day")))

(setq holiday-other-holidays            ; US and shared non-Stats
      '((holiday-float 1 1 3 "Martin Luther King Day (US)")
        (holiday-fixed 2 2 "Groundhog Day")
        (holiday-fixed 2 14 "Valentine's Day")
        (holiday-float 2 1 3 "President's Day (US)")
        (holiday-fixed 3 17 "St. Patrick's Day")
        (holiday-fixed 4 1 "April Fools' Day")
        (holiday-float 5 0 2 "Mother's Day")
        (holiday-float 5 1 -1 "Memorial Day (US)")
        (holiday-fixed 6 14 "Flag Day (US)")
        (holiday-float 6 0 3 "Father's Day")
        (holiday-fixed 7 4 "Independence Day (US)")
        (holiday-float 10 1 2 "Columbus Day (US)")
        (holiday-fixed 10 31 "Halloween")
        (holiday-fixed 11 11 "Veteran's Day (US)")
        (holiday-float 11 4 4 "Thanksgiving (US)")))

(setq calendar-date-style 'iso)
(setq diary-comment-start ";;")         ; Since diary supports lisp, use lisp style comments
(setq diary-comment-end "")             ; end of line
(setq calendar-latitude 49.3)
(setq calendar-longitude -123.1)
(setq calendar-daylight-savings-starts '(calendar-nth-named-day 2 0 3 year)) ; 2nd Sunday in Mar
(setq calendar-daylight-savings-ends '(calendar-nth-named-day 1 0 11 year))  ; 1st Sunday in Nov
(setq calendar-daylight-time-offset 60)
(setq calendar-daylight-savings-starts-time 120)
(setq calendar-daylight-savings-ends-time 120)
(setq org-agenda-include-diary t)       ; include diary entries in org-agenda
;; (setq calendar-week-start-day 0) ; Start on Monday?

;; (defface myface/calendar-anniversary-mark
;;   '((default :inherit ?)
;;     (((class color) (min-colors 88) (background dark))
;;      :background )
;;     (((class color) (min-colors 88) (background light))
;;      :background ))
;;     "My custom face for calendar anniversaries.")
#+END_SRC

** General - colour, lines, columns, backups, frame

#+BEGIN_SRC emacs-lisp
(setq ansi-color-faces-vector
      [default bold shadow italic underline bold bold-italic bold])
(setq-default fill-column 80)      ; where to wrap lines; set locally with C-x f
(set-default 'truncate-lines t)    ; truncate long lines, don't wrap them
(setq column-number-mode t)        ; show column numbers in modeline
(setq inhibit-startup-screen t)    ; skip startup screen
(show-paren-mode t)                ; highlight matching parentheses
(setq show-paren-delay 0)
(setq show-paren-when-point-inside-paren t)
(setq show-paren-when-point-in-periphery t)
(setq show-paren-style 'parenthesis)    ; "mixed" and "expression" is far too obnoxious for incomplete expressions
;(global-hl-line-mode t)            ; highlight current line
(setq visible-bell t)              ; blink, don't bark
(setq x-stretch-cursor t)          ; cursor width will match tab character width
(set-default 'indent-tabs-mode nil)

;;(setq uniquify-buffer-name-style (quote forward) nil (uniquify))
(setq uniquify-buffer-name-style (quote post-forward-angle-brackets))

(desktop-save-mode 0)         ; save the desktop/state of emacs' frames/buffersb

;; backups - filename.ext~
(setq backup-directory-alist `(("." . ,(expand-file-name ".backups/" user-emacs-directory)))) ; keep in clean
(setq backup-by-copying t)              ; vs renaming

;; autosaves - #filename.ext#, when autosave mode enabled, saves unsaved changes
;; (setq auto-save-list-file-prefix (expand-file-name ".auto-saves/" user-emacs-directory))

;; lock files - .#filename.ext
;; (setq create-lockfiles nil)

(put 'narrow-to-region 'disabled nil)   ; enable narrowing C-x n n

(toggle-scroll-bar 0)
(tool-bar-mode 0)                      ; Remove clunky toolbar and icons
(global-eldoc-mode 1)                  ; highlight parameters in minibuffer
(setq reb-re-syntax 'string)           ; c-c TAB to cycle when in regexp-builder

;; see file-local variable: time-stamp-pattern, time-stamp-start, etc
(add-hook 'before-save-hook 'time-stamp) ; update timestamps of set format before saving

(setq delete-by-moving-to-trash t)     ; move files to trash instead of deleting

(add-hook 'image-mode-hook 'auto-revert-mode) ; update image buffers when files change

;; python tabs and spacing
(setq-default python-indent-offset 4)
(add-hook
 'python-mode-hook
 (lambda ()
   ;; 110 fits roughly 2 buffers on 1080p monitor, more sane for jupyter notebooks
   ;; Keep consistent with tools: ~/.black "line-length = 110" ;; ~/.flake8 "max-line-length = 110" ;; etc
   (setq-local fill-column 110)
   (setq-local comment-inline-offset 2) ; PEP8 & personal preference
   (setq tab-width 4)
   (setq python-indent-offset 4)))

;; tree-sitter
;; pre-compiled grammars: https://github.com/emacs-tree-sitter/tree-sitter-langs/releases
;; about: https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
;; font lock: https://www.gnu.org/software/emacs/manual/html_node/emacs/Parser_002dbased-Font-Lock.html
(add-hook
 'python-ts-mode-hook                   ; not sure why this is needed...?
 (lambda ()
   (run-hooks 'python-mode-hook)))

(setq set-mark-command-repeat-pop 't)   ; remove leading modifier key on repeat mark pops
;; C-u C-SPC C-SPC to pop local mark twice
;; C-x C-SPC C-SPC to pop global mark twice

(setq isearch-lazy-count 't)
#+END_SRC

** Fonts

=list-fontsets= to see available installed fonts.

Some good programming fonts [[https://blog.checkio.org/top-10-most-popular-coding-fonts-5f6e65282266?imm_mid=0f5f86][here]].

1. Inconsolata
2. Fira Mono
3. Source Code Pro
4. Anonymous Pro
5. M+ 1M
6. Hack
7. *DejaVu Sans Mono*
8. Droid Sans Mono
9. Ubuntu Mono
10. Bitsream Vera Sans Mono

#+BEGIN_SRC emacs-lisp :results none
;; Test char and monospace:
;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?

(setq default-font-name nil)
(cond
 ;; First choice
 ((find-font (font-spec :name "DejaVu Sans Mono"))
  (setq default-font-name "DejaVu Sans Mono")
  (setq default-font-size 12))

 ;; Second choice
 ((find-font (font-spec :name "Consolas"))
  (setq default-font-name "Consolas")
  (setq default-font-size 13))

 ;; Fallback, if we must...
 ((find-font (font-spec :name "Courier New"))
  (setq default-font-name "Courier New")
  (setq default-font-size 12))
 )

;; variable pitch font
(cond
 ((find-font (font-spec :name "Calibri"))
  (set-face-attribute 'variable-pitch nil
                      :family "Calibri"
                      :height (* 10 (+ 2 default-font-size))
                      )))

(when default-font-name
  (progn
    ;; use default font in new frames
    (add-to-list 'default-frame-alist
                 `(font . ,(format "%s-%s"
                                   default-font-name
                                   (or default-font-size 12))))

    (set-face-attribute 'fixed-pitch nil
                        :family default-font-name
                        :height 'unspecified)))

;; FRAME SIZE
;; initial frame should reasonably fit various laptop screens (smaller than 1080p)
(setq initial-frame-alist
      `((top . 10) (left . 1) (width . 130) (height . 47)))
;; new frames should be slightly smaller, but still usable
(add-to-list 'default-frame-alist
             '(width . 110))
(add-to-list 'default-frame-alist
             '(height . 45))
#+END_SRC

*** Try a font
Use =eval-last-sexp= (=C-x C-e=) to try the different fonts: [[info:emacs#Lisp Eval][info:emacs#Lisp Eval]]

#+BEGIN_SRC emacs-lisp :tangle no :results output silent
(set-frame-font "Consolas-13")
(set-frame-font "Source Code Pro 12")
(set-frame-font "Liberation Mono 12")
(set-frame-font "Fira Mono 12")
(set-frame-font "Anonymous Pro 13")
(set-frame-font "DejaVu Sans Mono-12")
(set-frame-font "Lucida Console-12")
(set-frame-font "Inconsolata 12")
(set-frame-font "M+ 1m 14")
(set-frame-font "Ubuntu Mono 13")
(set-frame-font "Courier New-12")
#+END_SRC

*** Look at installed fonts
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
(x-select-font nil t)
#+END_SRC

** Themes

- /Custom Themes/ (not /color-themes/) can be loaded and stacked using =load-theme=.
- Loaded themes must be unloaded individually by =disable-theme=.
- Both allow tab-completion for applicable themes.

#+BEGIN_SRC emacs-lisp
;; (unless custom-enabled-themes
;;   (load-theme 'material t nil))		; load & enable theme, if nothing already set
(setq custom-theme-directory user-emacs-directory)
(load-theme 'two-fifteen t)             ; current theme, work-in-progress

(setq window-divider-default-right-width 4)
(setq window-divider-default-bottom-width 1)
(setq window-divider-default-places 'right-only)
(window-divider-mode 1)
#+END_SRC

** UTF-8

#+BEGIN_SRC emacs-lisp
(setq PYTHONIOENCODING "utf-8")        ;print utf-8 in shell
(prefer-coding-system 'utf-8)

;; Unicode characters cause some windows systems to hang obnoxiously
;; (Easily noticed in large org-mode files using org-bullets package.)
;; https://github.com/purcell/emacs.d/issues/273
(when (eq system-type 'windows-nt)
  (setq inhibit-compacting-font-caches t))
#+END_SRC

** ibuffer - custom filters

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-x\C-b" 'ibuffer) ;

(setq ibuffer-saved-filter-groups
      (quote
       (("ibuffer-filter-groups"
         ("Directories"
          (used-mode . dired-mode))
         ("Org Files"
          (used-mode . org-mode))
         ("Notebooks"
          (name . "\\*ein:.*"))
         ("Python"
          (or
           (used-mode . python-mode)
           (used-mode . python-ts-mode)))
         ("Emacs Lisp"
          (used-mode . emacs-lisp-mode))
         ("Images"
          (used-mode . image-mode))
         ("Magit"
          (name . "magit.*"))
         ("Definitions"
          (name . "\\*define-it:.*"))
         ("Help"
          (name . "\\*Help\\*\\|\\*helpful .*"))
         ))))

(setq ibuffer-saved-filters
      (quote
       (("gnus"
         ((or
           (mode . message-mode)
           (mode . mail-mode)
           (mode . gnus-group-mode)
           (mode . gnus-summary-mode)
           (mode . gnus-article-mode))))
        ("programming"
         ((or
           (mode . emacs-lisp-mode)
           (mode . cperl-mode)
           (mode . c-mode)
           (mode . java-mode)
           (mode . idl-mode)
           (mode . lisp-mode)))))))
#+END_SRC

* Packages


If there is a compile error, or "tar not found," try
=package-refresh-contents= to refresh the package database.

** Icons 
#+begin_src emacs-lisp
;; Icons ======================================================================
(use-package nerd-icons
  :ensure t
  :defer t)
(use-package nerd-icons-completion
  :ensure t
  :if (display-graphic-p)
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
  )
(use-package nerd-icons-dired
  :ensure t
  :if (display-graphic-p)
  :hook
  (dired-mode . nerd-icons-dired-mode)
  )
(use-package nerd-icons-corfu
  :ensure t
  :if (display-graphic-p)
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src
** Completion and Minibuffer (consult, vertico, marginalia, corfu, etc)
#+begin_src emacs-lisp

;; https://github.com/minad/vertico
(use-package vertico
  :ensure t
  :config
  (vertico-mode 1)
  (setq vertico-cycle 't))

(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic)))

;; https://github.com/minad/marginalia
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode 1))

;; https://github.com/minad/consult/
(use-package consult
  :ensure t
  :bind (;; A recursive grep
	 ;;        ("M-s M-g" . consult-grep)
	 ;;        ;; Search for files names recursively
	 ;;        ("M-s M-f" . consult-find)
	 ;;        ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
	 ;;        ;; Search the current buffer
         ("M-s M-l" . consult-line)
	 ;;        ;; Switch to another buffer, or bookmarked file, or recently
	 ;;        ;; opened file.
         ("M-s M-b" . consult-buffer)))

;; https://github.com/oantolin/embark
(use-package embark
  :ensure t
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-c C-c" . embark-collect)
         ("C-c C-e" . embark-export)))

(use-package embark-consult
  :ensure t)

;; https://github.com/minad/corfu
(use-package corfu
  :ensure t
  :defer 1
  :init
  (global-corfu-mode 1)
  (corfu-echo-mode 1)
  (corfu-popupinfo-mode 1))

;; Https://github.com/minad/cape
(use-package cape
  :ensure t)
#+end_src

** hs-minor-mode
Emacs Built-in.
- =S-<mouse2>= and =C-c @ C-t= also work;  =C-c @ C-a= to toggle all.
- =C-c C-j= to jump (imenu)

#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'hs-minor-mode)
(eval-after-load "python"
  '(define-key python-mode-map (kbd "C-<tab>") 'hs-toggle-hiding))

;; temporary fix for python-ts-mode, can be updated when fully migrated to Emacs 30
(add-hook 'python-ts-mode-hook 'hs-minor-mode)
(define-key python-ts-mode-map (kbd "C-<tab>") 'hs-toggle-hiding)
#+end_src

** diminish
Hides or renames minor modes.
Required for =:diminish= parameter in use-package calls.
#+BEGIN_SRC emacs-lisp
(use-package diminish :ensure t)
#+END_SRC

** plantuml-mode
#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode ("\\.org\\'" . org-mode)
  )
#+end_src

** command-log-mode
Use for demoing emacs; keystrokes get logged into a designated buffer, along
with the command bound to them.

#+begin_src emacs-lisp
(use-package command-log-mode :defer t)
#+end_src

** visual-fill-column
Instead of wrapping lines at the window edge, which is the standard behaviour of
`visual-line-mode', it wraps lines at `fill-column'.  Must be enabled after
enabling visual-line-mode.  I leave it off by default, but want it available
depending on the situation.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :defer t)
#+end_src

** elfeed - RSS reader
#+begin_src emacs-lisp
(unless my/on-work-pc
  (use-package elfeed
    :defer t
    :config
    ;; (setq elfeed-feeds
    ;;       '("https://sachachua.com/blog/feed/" "https://planet.emacslife.com/atom.xml"))
    (define-key elfeed-show-mode-map (kbd "j") 'shr-next-link)
    (define-key elfeed-show-mode-map (kbd "k") 'shr-previous-link)
    (define-key elfeed-show-mode-map (kbd "e") 'eww)

    (add-hook 'elfeed-show-mode-hook
              (lambda ()
                (progn
                  (visual-line-mode t)
                  (when (fboundp 'visual-fill-column-mode)
                    (visual-fill-column-mode t))
                  (text-scale-increase 1)
                  )))
    )

  (use-package elfeed-org
    :after (elfeed)
    :defer t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat my/org-directory "elfeed.org")))
    )
  )
#+end_src

** deft
quickly browse, filter, and edit plain text notes
#+begin_src emacs-lisp
(use-package deft
  :defer t
  :config
  (setq deft-directory my/org-directory)
  )
#+end_src

** TRY erc - IRC client
- [[info:erc#Top][info:erc#Top]]
** TRY god-mode, objed - modal navigation and editing
Modal editing in an emacs-y way.
#+BEGIN_SRC emacs-lisp
(use-package god-mode :ensure nil :defer t)
(use-package objed :ensure nil :defer t)
#+END_SRC

** themes

Place to put themes 100% decided on.

#+BEGIN_SRC emacs-lisp
(use-package material-theme :ensure t :defer t)
(use-package leuven-theme :ensure t :defer t)
;; (use-package spacemacs-theme
;;   :ensure t
;;   :defer t
;;   ;; :init (load-theme 'spacemacs-dark t)
;;   )
#+END_SRC

** smartparens - Minor mode to work with pairs
- https://github.com/Fuco1/smartparens (more animated gif guides)
- https://ebzzry.io/en/emacs-pairs/ suggested key bindings and usage
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :defer t
  :init
  :config
  (setq sp-smartparens-bindings "sp")
  )
#+END_SRC

** which-key - Comand popup
- Gentle reminders and added discoverability.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :defer 1
  :diminish which-key-mode
  :config
  (which-key-mode))

#+END_SRC

** iedit - Simple refactoring

- https://github.com/victorhge/iedit
- =C-;= at symbol to start refactor, again to finish.

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t
  :defer 3)
#+END_SRC

** Language Server

=lsp-mode= performance seems good since Emacs 27 JSON improvements.

- https://emacs-lsp.github.io/lsp-mode/
- pip: =pip install/uninstall python-language-server=
- conda: =conda install/uninstall python-language-server=

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c i")
  :hook ((python-mode . lsp-deferred)
         ;; which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :config
  )

;; optional
(use-package lsp-ui :commands lsp-ui-mode) ;automatically activated by lsp-mode
#+END_SRC

** smartscan - Simple word-instance jumping

- http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/
- easily move between like-symbols

#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :ensure nil
  :defer 1
  ;; :bind (("M-n" . smartscan-symbol-go-forward)
  ;;        ("M-p" . smartscan-symbol-go-backward))
  )
#+END_SRC

** org2blog - Blog to wordpress from org
- [[https://github.com/org2blog/org2blog][org2blog]]
#+BEGIN_SRC emacs-lisp
(use-package org2blog
  :ensure nil
  :defer 1
  :init
  :config
  ;; see init_private.el
  )
#+END_SRC

** pulsar
Highlight window jumps.
#+begin_src emacs-lisp
(use-package pulsar
  :ensure t
  :defer 3
  :config
  (pulsar-global-mode 1)
  (setq pulsar-pulse-region-functions '(ace-window avy-goto-char-2))
  )
#+end_src

** doom-modeline - Clean minimal modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-icon t)           ; requires nerd-icons
  :init (doom-modeline-mode 1)
  )
#+END_SRC

** flycheck - Syntax-checking

https://github.com/flycheck/flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  ;; :config
  ;; (global-flycheck-mode) <-- too noisy, enable when needed
  )
#+END_SRC

** Flake8
- suppress single warning in source:  =# noqa: F841=
- [[https://flake8.pycqa.org/en/3.0.2/user/configuration.html][Flake8 config]] on Windows:
  + =~/.flake8= ← works in lsp, but not command-line (odd)
  + =project-dir/.flake8= ← works in both lsp and command-line, takes precedence
- Customizing LSP, if needed:
  + =lsp-pylsp-configuration-sources=
  + =lsp-pylsp-plugins-flake8-config=

** python-black
- lsp formatting didn't work for me, so using dedicated package
- command-line usage:
  Preview changes: =black -l 110 --diff --color my_file.py=
  Commit changes:  =black -l 110 my_file.py=
- [[https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file][Black TOML config]] on Windows:
  + =~/.black= ← command-line?
  + =project-dir/pyproject.toml=
- =python-black-macchiato= required for indented region formatting, but patch needs to be applied.
  https://github.com/wbolster/black-macchiato/pull/15

- Functions to consider binding:
  - python-black-org-mode-block
  - python-black-on-save-mode-enable-dwim
  - python-black-statement
  - python-black-partial-dwim
  - python-black-on-save-mode
  - python-black-buffer
  - python-black-region

#+begin_src emacs-lisp
(use-package python-black
  :ensure t
  :demand t
  :after python
  ;;:hook (python-mode . python-black-on-save-mode-enable-dwim)
  ;; :bind (("" . f1)
  ;;        (:: . f2))
  )
#+end_src

** diff-hl - Highlight diffs

https://github.com/dgutov/diff-hl

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :defer t
  :config
  (diff-hl-flydiff-mode)
  ;(global-diff-hl-mode)  ;; slow on lesser computers
  )
#+END_SRC

** avy - Jump to visible text
https://github.com/abo-abo/avy
#+BEGIN_SRC emacs-lisp
(use-package avy :ensure t
  :bind ("C-:" . avy-goto-char-2))
#+END_SRC

** try - try package before installing
Try is a package that allows you to try out Emacs packages without installing them.

#+begin_src emacs-lisp
(use-package try
  :ensure t
  :defer t
  )
#+end_src

** rainbow-mode - Set bg to colour of #00000 string
- http://elpa.gnu.org/packages/rainbow-mode.html
- This is very useful when modifying themes.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :defer t)
#+END_SRC

** expand-region - Select "up"

Example of how =use-package= can replace =require= and
=global-set-key=.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :defer 1
  :bind ("C-=" . er/expand-region))
#+END_SRC

** wrap-region - Wrap region in matching characters

- http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/
- Use for =org-mode= formatting

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :ensure t
  :config
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" ":" org-mode) ; Avoid conflict with expand-region, use ':'
     ("+" "+" "+" org-mode)
     ("_" "_" nil org-mode)))
  ;; ("$" "$" nil (org-mode latex-mode))
  (add-hook 'org-mode-hook 'wrap-region-mode))
(diminish 'wrap-region-mode)
#+END_SRC

** org-modern
A modern replacement of org-superstar, which includes far more configurable options.
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :defer t)
#+end_src

** rainbow-delimiters
Rainbow parentheses. Face customization might be required, depending on theme.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t)
#+end_src

** ace-window - DWIM window switcher
- https://github.com/abo-abo/ace-window

- Note: =aw-scope= defaults to =global= (all frames).  Toggle by setting to
  =frame=

- swap window: =C-u ace-window=
- delete window: =C-u C-u ace-window=

  At the dispatcher (3 or more windows unless =aw-dispatch-always= = =t=):

  - =x= : delete window
  - =m= : swap windows
  - =M= : move window
  - =j= : select buffer
  - =n= : select the previous window
  - =u= : select buffer in the other window
  - =c= : split window fairly, either vertically or horizontally
  - =v= : split window vertically
  - =b= : split window horizontally
  - =o= : maximize current window
  - =?= : show these command bindings

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window )           ; replace facemenu-keymap binding
  :config (setq aw-scope 'frame)                  ; Only consider current frame's windows
  )
#+END_SRC

** transpose-frame - transpose windows in frame
https://melpa.org/#/transpose-frame

#+begin_quote
This program provides some interactive functions which allows users
to transpose windows arrangement in currently selected frame:

`transpose-frame'  ...  Swap x-direction and y-direction

+------------+------------+      +----------------+--------+
|            |     B      |      |        A       |        |
|     A      +------------+      |                |        |
|            |     C      |  =>  +--------+-------+   D    |
+------------+------------+      |   B    |   C   |        |
|            D            |      |        |       |        |
+-------------------------+      +--------+-------+--------+

`flip-frame'  ...  Flip vertically

+------------+------------+      +------------+------------+
|            |     B      |      |            D            |
|     A      +------------+      +------------+------------+
|            |     C      |  =>  |            |     C      |
+------------+------------+      |     A      +------------+
|            D            |      |            |     B      |
+-------------------------+      +------------+------------+

`flop-frame'  ...  Flop horizontally

+------------+------------+      +------------+------------+
|            |     B      |      |     B      |            |
|     A      +------------+      +------------+     A      |
|            |     C      |  =>  |     C      |            |
+------------+------------+      +------------+------------+
|            D            |      |            D            |
+-------------------------+      +-------------------------+

`rotate-frame'  ...  Rotate 180 degrees

+------------+------------+      +-------------------------+
|            |     B      |      |            D            |
|     A      +------------+      +------------+------------+
|            |     C      |  =>  |     C      |            |
+------------+------------+      +------------+     A      |
|            D            |      |     B      |            |
+-------------------------+      +------------+------------+

`rotate-frame-clockwise'  ...  Rotate 90 degrees clockwise

+------------+------------+      +-------+-----------------+
|            |     B      |      |       |        A        |
|     A      +------------+      |       |                 |
|            |     C      |  =>  |   D   +--------+--------+
+------------+------------+      |       |   B    |   C    |
|            D            |      |       |        |        |
+-------------------------+      +-------+--------+--------+

`rotate-frame-anticlockwise'  ...  Rotate 90 degrees anti-clockwise

+------------+------------+      +--------+--------+-------+
|            |     B      |      |   B    |   C    |       |
|     A      +------------+      |        |        |       |
|            |     C      |  =>  +--------+--------+   D   |
+------------+------------+      |        A        |       |
|            D            |      |                 |       |
+-------------------------+      +-----------------+-------+
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :ensure t
  )
#+END_SRC

** magit - Git integration
A Git version control interface.

Recommended: =ssh-keygen=, add key to git host, ensure =.ssh/= directory is
in HOME directory (=C:/Users/Username/AppData/Roaming/= on /Windows 10/)

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status)
  )
#+END_SRC

** yasnippet
- Do we really need the thousands of snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]?
- [ ] Cherry pick a few, put into custom directory.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure nil
  :defer t
  )
;; add generic fundamental-mode snippets across all modes
(add-hook 'yas-minor-mode-hook
          (lambda () (yas-activate-extra-mode 'fundamental-mode)))
#+END_SRC

** neotree - File tree explorer bound to <F8>
https://github.com/jaypei/emacs-neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind ("<f8>" . neotree-toggle)
  )
#+END_SRC

** move-text

https://github.com/emacsfodder/move-text
Ultra simple =M-UP= and =M-DOWN= to move lines/regions

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :ensure t
  :config
  (move-text-default-bindings)
  )
#+END_SRC

** markdown-mode

Major mode for editing markdown.

- https://jblevins.org/projects/markdown-mode/
- https://leanpub.com/markdown-mode ← Online book

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
)
#+END_SRC

** helpful - adding more info to emacs help

https://github.com/Wilfred/helpful

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t

  ;; replace default help functions
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)

         ;; additional
         ("C-c C-d" . helpful-at-point) ;
         ;; ("C-h F" . helpful-function) ; replace
         ;; ("C-h C" . helpful-command) ;
         ))
#+END_SRC

** multiple-cursors

- https://github.com/magnars/multiple-cursors.el/

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :defer t
  :init
  :config
  :bind (
         ("C-|" . 'mc/edit-lines)
         ("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C-<" . 'mc/mark-all-like-this)
         ("C-S-<mouse-1>" . 'mc/add-cursor-on-click)
         )
  )
#+END_SRC

** pyvenv
Use =add-dir-local-variable= or add the following to =.dir-locals.el= in python source trees:
#+begin_src emacs-lisp :tangle no
((python-mode . ((pyvenv-default-virtual-env-name . ".venv"))))
#+end_src

1. Create new virtual environment: =python -m venv .venv=
2. Activate: =.venv\Scripts\activate=
3. Install required project dependencies and tools: =pip install python-lsp-server pandas black=
4. Open a python file, agree to run =dir-locals= (optionally add permanent flag to not be asked again) then start =lsp=. First =lsp= process may take a moment.

#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :ensure t
  :defer t
  :init
  :config
  :bind
  )
#+END_SRC

** define-it
Define, translate, wiki the word
#+begin_src emacs-lisp
(use-package define-it :ensure t :defer t
  :config
  (setq define-it-show-google-translate nil)              ; Disable translate by default
  (setq google-translate-default-source-language "auto")  ; Auto detect language.
  (setq google-translate-default-target-language "en")    ; Set your target language.
  )
#+end_src

** org-variable-pitch
Use "org-variable-pitch-minor-mode" instead of "variable-pitch-mode" for proper list bullet alignment.
#+begin_src emacs-lisp
(use-package org-variable-pitch
  :ensure t
  :defer t
  :config
  (progn
    (set-face-attribute 'org-variable-pitch-fixed-face nil :inherit 'fixed-pitch :height 'unspecified)
    ;(set-face-attribute 'org-variable-pitch-fixed-face nil :inherit 'fixed-pitch)
    ;(add-hook 'after-init-hook #'org-variable-pitch-setup)
  ))
#+end_src

** nerd-icons
Used in doom-modeline. Install package, then run =M-x nerd-icons-install-fonts=, and install =NFM.ttf= font manually.
#+begin_src emacs-lisp

#+end_src

* Dired

Let =dired= try to guess target (copy and rename ops) directory when
two =dired= buffers open.

Super useful!
- wdired-mode:

#+begin_quote
In WDired mode, you can edit the names of the files in the
buffer, the target of the links, and the permission bits of the
files.  After typing C-c C-c, Emacs modifies the files and
directories to reflect your edits.
#+end_quote

#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)		; guess target directory
(setq ls-lisp-dirs-first t)
(eval-after-load "dired"
  '(define-key dired-mode-map (kbd "C-c w") 'wdired-change-to-wdired-mode))
;; https://www.gnu.org/software/emacs/manual/html_node/dired-x/
(add-hook 'dired-load-hook
          (lambda ()
            ;; Use dired-x-find-file over find-file
            (setq dired-x-hands-off-my-keys nil) ; must be done before loading dired-x
            ;; Set dired-x global variables here.  For example:
            ;; (setq dired-guess-shell-gnutar "gtar")
            ))
(load "dired-x")
(add-hook 'dired-mode-hook
          (lambda ()
            ;; Set dired-x buffer-local variables here.  For example:
            (dired-omit-mode 1)         ; hides dll, o, ... files by default, can be toggled
            ;; See `dired-omit-extensions'
            ))
(autoload 'dired-jump "dired-x"
  "Jump to Dired buffer corresponding to current buffer." t)

(autoload 'dired-jump-other-window "dired-x"
  "Like \\[dired-jump] (dired-jump) but in other window." t)

(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)

;; Use the following RECENT and OLD time strings for dired buffers
(setq ls-lisp-use-localized-time-format 't)
(setq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d      "))
#+END_SRC

* Org Mode
** Export

- http://orgmode.org/manual/Export-settings.html#Export-settings

#+BEGIN_SRC emacs-lisp
(setq org-export-initial-scope 'subtree)
(setq org-use-subsuperscripts '{})      ; require {} wrapper for ^super/_sub scripts
;; postamble
(setq org-html-postamble 't)
(setq org-html-postamble-format
      '(("en" "<p class=\"author\">%a</p> <p class=\"date\">%T</p>")))
#+END_SRC

** Files

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/../or
;; my/org-directory defined in init_private.el

;; (add-hook 'org-mode-hook 'wrap-region-mode)
(setq org-agenda-files
      (list
       (concat my/org-directory "work.org")     ; Work
       (concat my/org-directory "agenda.org")))  ; Life Stuff - rename to 'personal'?

(setq org-default-notes-file (concat my/org-directory "captured.org")) ; Unsorted notes
#+END_SRC

** Capture

- [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html][Capture Template Elements]]

#+BEGIN_SRC emacs-lisp :results output silent
(setq org-capture-templates
      `(("t"				; key
         "Task (work)"                  ; description
         entry				; type
         ;; heading type and title
         (file+headline ,(concat my/org-directory "work.org") "Inbox") ; target
         "* TODO %?\n%i\n%a\n\n"	; template
         ;; optional property list  ; properties
         :prepend t                     ; insert at head of list
         )
        ("T"				; key
         "Task (general)"               ; description
         entry				; type
         ;; heading type and title
         (file+headline org-default-notes-file "Tasks") ; target
         "* TODO %?\n%i\n%a\n\n"                      ; template
         ;; optional property list  ; properties
         :prepend t                     ; insert at head of list
         )
        ("n"				; key
         "C365 Task (no-status, manually set to NEW)"                  ; description
         entry				; type
         ;; heading type and title
         (file+headline ,(concat my/org-directory "C365_tracker.org") "Tasks") ; target
         "* %?\n%i\n%a\n\n"	; template
         ;; optional property list  ; properties
         :prepend t                     ; insert at head of list
         )
        ("m"				; key
         "Meeting (work)"               ; description
         entry                          ; type
         ;; heading type and title
         (file+headline ,(concat my/org-directory "work.org") "MINUTES & MEETINGS") ; target
         "* %?\n%^T  (entered %U from %a)\n%i\n\n" ; template
         :prepend t
         )
        ("l"
         "Daily Log (work)"
         item
         (file+olp+datetree ,(concat my/org-directory "work.org") "Daily")
         "1. %<%H:%M> %^{prompt}  %K - %a\n   - %?\n"  ; ?? Use %<...> instead of %U
         :prepend nil
         :unnarrowed t
         :empty-lines-before 0
         :empty-lines-after 0
         )
        ("j"
         "Learning Journal"
         entry
         (file+olp+datetree org-default-notes-file "Learning Journal")
         "* %?\nEntered on %U\n- Active Region: %i\n- Created while at: %a\n\n" ; %a stores link, %i is active region
         )
        ))
#+END_SRC

** Other
- [[https://orgmode.org/manual/Speed-keys.html][Org Speed Keys]]
- Been having unfolding issues recently, temporarily (sometimes) resolved by evaluating one of:
  #+begin_src emacs-lisp :tangle no
  (setq org-fold-core-style 'text-properties) ; new method, default as of Org 9.6, faster, more features, but has issues on my 4+MB work file
  (setq org-fold-core-style 'overlays)        ; old method, less error-prone, slower on large files
  #+end_src
- 'org-fold-core-style' should be set prior to loading org-mode. So to revert back to the old style, set 'overlays in init.

#+BEGIN_SRC emacs-lisp
(setq org-fold-core-style 'overlays)   ; keep using old style for now, 'text-properties seems buggy
(setq org-ellipsis " ⤵")			;⤵, ▐, ►, ▽, ◿, ◹, », ↵, ≋, …, ⋞, ⊡, ⊹, ⊘

;; use global ids for links
(setq org-id-link-to-org-use-id 't)

;; fontify (pretty formating) code in code blocks
(setq org-src-fontify-natively t)	; important for init.org !
(setq org-hide-emphasis-markers t)      ; hide italic,bold,monospace text
                                        ; formatters

(setq org-fontify-quote-and-verse-blocks t) ; fontify quote and verse blocks

;; org-refile (C-c C-w)
(setq org-refile-targets (quote ((nil :maxlevel . 5)
                                 (org-agenda-files :maxlevel . 5))))
(setq org-outline-path-complete-in-steps nil) ; prevent org interfering w/ivy
(setq org-refile-use-outline-path 'file) ; refile paths begin with the file name
(setq org-refile-allow-creating-parent-nodes 'confirm) ; confirm creation of new headings
(setq org-reverse-note-order t)         ; new notes at top of file or entry

;; org-mode customization
(setq org-log-done 'time)         ; add time stamp when task moves to DONE state
(setq org-todo-keywords           ; default TODO keywords
      '((sequence "TODO(t)" "STARTD(s)" "WAITING(w)" "|" "DONE(d)" "DELEGATED(e)" "CANCELLED(c)")))

                                        ;org-mode keybindings
(define-key global-map "\C-cc" 'org-capture)    ; todo: move to use-package :bind ?
(define-key global-map "\C-ca" 'org-agenda)     ;
(define-key global-map "\C-cl" 'org-store-link) ;

;; Add python to list of languages for org-babel to load
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   ;; (ipython . t) ;; requires ob-ipython
   (ditaa . t)
   (plantuml . t)
   (shell . t)
   )
 )

;; Don't prompt before running org code blocks w/C-c C-c
(setq org-confirm-babel-evaluate nil)

;; http://cachestocaches.com/2018/6/org-literate-programming/
;; Fix an incompatibility between the ob-async and ob-ipython packages
(setq ob-async-no-async-languages-alist '("ipython"))

;; Enable single-key commands at beginning of headers
(setq org-use-speed-commands t)

;; <s TAB completion for SRC scode block
;; https://orgmode.org/manual/Structure-Templates.html
(require 'org-tempo nil 'noerror)       ; required for org >= 9.2

;; Try org-indirect-buffer-display options
(setq org-indirect-buffer-display 'new-frame)
(setq org-src-window-setup 'other-frame)

;; Alphabetical plain list options!
(setq org-list-allow-alphabetical t)

;; Use org-specific beginning-of-line/end-of-line, before true ^/$
(setq org-special-ctrl-a/e 'reversed)

(setq org-startup-indented t)         ; visual indent only
;;(setq org-src-preserve-indentation t)
(setq org-edit-src-content-indentation 0) ; don't indent src blocks
(setq org-src-tab-acts-natively t)
(setq org-hide-leading-stars t)

;; Default bullet when demoting item or creating new sub-list
(setq org-list-demote-modify-bullet
      '(
        ("+" . "-")
        ("-" . "+")
        ("*" . "+")
        ("1." . "a)")
        ("1)" . "a.")
        ("a)" . "-")
        ("A)" . "-")
        ("a." . "-")
        ("A." . "-")
        ))

;; My use-case often involves folding plain lists, then using 'org-copy-visible'
(setq org-cycle-include-plain-lists 'integrate)
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;; Don't remind me of weekly tasks immediately after completion
(setq org-deadline-warning-days 5)
;; Add more depth to agenda clock report: "v R" from agenda view
(setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))
;; Save clock history across sessions
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

* Windows
** Tramp / Putty
- https://www.emacswiki.org/emacs/Tramp_on_Windows,
- [[https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/][remote file permissions]]

Install PuTTY and use =plink=.  Trying to use Tramp with =ssh= on windows causes
emacs to hang.

#+begin_src emacs-lisp
(when (eq window-system 'w32)
  (setq tramp-default-method "plink"))
#+end_src

ie. =find-file /plink:user@host:/home/dir/=

Optional: Generate a key, upload to remote host, add to =.ssh/allowed_keys=, then connect with just =plink mysession= for passwordless login.

=find-file /plink:mysession:/home/dir/=

** Task Bar shortcut
=runemacs.exe= will hide the terminal window, but if you pin the shortcut to
the taskbar, it will be =emacs.exe=.  The following steps ensures emacs icon
can be used to launch emacs and browse open windows.

https://emacs.stackexchange.com/questions/2221/running-emacs-from-windows-taskbar

1. Run runemacs.exe with no pre-existing icon in the taskbar.
2. Right click on the running Emacs icon in the taskbar, and click on "pin this program to taskbar."
3. Close Emacs
4. Shift right-click on the pinned Emacs icon on the taskbar, click on Properties, and change the target from emacs.exe to runemacs.exe.

** External Programs
*** Open with default Windows app (w32-browser/w32-shell-execute)
- /Control-Enter/ to open with default windows application in dired mode.
- src: https://stackoverflow.com/questions/2284319/opening-files-with-default-windows-application-from-within-emacs

#+BEGIN_SRC emacs-lisp
(when (eq 'windows-nt system-type)
  (defun w32-browser (doc)
    (w32-shell-execute 1 doc))

  (eval-after-load "dired"
    '(define-key
      dired-mode-map [C-return]
      
      ;; C-ENT to open with default Windows application, C-u C-ENT to open parent directory      
      (lambda (&optional arg)
        (interactive "P")
        (let ((current-file
               (or
                (dired-get-filename nil t) ; absolute, no error, (no slash on dirs)
                (dired-get-subdir)         ; has / at end
                default-directory)))        ; has / at end
          (if arg
              (w32-browser (replace-regexp-in-string "/" "\\" (file-name-parent-directory current-file) t t))
            (w32-browser (replace-regexp-in-string "/" "\\" current-file t t)))))
      )))

#+END_SRC

*** Spelling & Dictionaries (aspell/ispell/hunspell)

- WINDOWS: install /standalone/ hunspell from [[https://sourceforge.net/projects/ezwinports/][ezwinports]].
  - cygwin hunspell caused issues with conflicting line ending formats
  - dictionaries to handle apostrophes. ie. =echo I'm | hunspell -d en_CA=

- Updated dict from openoffice to handle apostrophes:
  - https://extensions.openoffice.org/en/project/dict-en-fixed
  - (via https://sourceforge.net/p/hunspell/patches/35/)


#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_CA.UTF-8")
(setq ispell-dictionary "en_CA")

;; Standalone Hunspell
(setq ispell-program-name (file-name-concat my/user-dir "Apps/hunspell/bin/hunspell"))
;; Add en_CA .aff and .dic files to standalone hunspell folder:
;; - The binary may have been comppiled with this as an option: `hunspell/share/hunspell'
;; - If not, you can set the DICPATH environment variable:
(setenv "DICPATH" (file-name-concat my/user-dir "/Apps/hunspell/share/dictionaries"))
;; Default Personal Dictionary: `~/hunspell_locale' (ie. `~/hunspell_en_CA')
(setq ispell-personal-dictionary (file-name-concat my/user-dir "hunspell_en_CA"))
;; NOTE: There's a note that says this file is required to already exist?
#+END_SRC

*** Git for Windows
Includes a bash environment with various tools that is a /much/ simpler alternative to a full cygwin environment.

#+begin_src emacs-lisp
;; Add git-for-windows usr/bin directory to PATH and exec-path; includes diff & other tools
(let* ((git-win-usr-bin-path (file-name-concat my/git4win-directory "usr/bin")))
  (if (file-exists-p git-win-usr-bin-path)
      (progn
        (setenv "PATH"
                (concat (getenv "PATH") path-separator git-win-usr-bin-path))
        (add-to-list 'exec-path git-win-usr-bin-path))))
#+end_src

*** OLD Cygwin
CLOSED: [2024-01-04 Thu 20:26]
I would like to remove Cygwin completely, supercede it with Git for Windows, but need to test on various computers.
https://www.emacswiki.org/emacs/NTEmacsWithCygwin#toc2

#+BEGIN_SRC emacs-lisp :tangle no
;; Sets your shell to use cygwin's bash, if Emacs finds it's running
;; under Windows and c:\cygwin exists. Assumes that C:\cygwin\bin is
;; not already in your Windows Path (it generally should not be).
;;

(if (string-match-p (regexp-quote "steven.brown") (getenv "USERPROFILE"))
    (setq my/env "work")
  (setq my/env "personal"))


(let* ((cygwin-root (if (string-equal my/env "work")
                        "c:/Users/steven.brown/Apps/cygwin64" ; work
                      "c:/Program Files/cygwin64"))	      ; home
       (cygwin-bin (concat cygwin-root "/bin")))
  (when (and (eq 'windows-nt system-type)
             (file-readable-p cygwin-root))

    (setq exec-path (cons cygwin-bin exec-path))
    (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))

    ;; By default use the Windows HOME. (userdir/AppData/Roaming/.emacs.d)
    ;; (setenv "HOME" (getenv "USERPROFILE"))
    ;; Otherwise, uncomment below to set a HOME
    ;;      (setenv "HOME" (concat cygwin-root "/home/eric")) ;TODO: Customize by environment

    ;; NT-emacs assumes a Windows shell. Change to bash.
    (setq shell-file-name "bash")
    (setenv "SHELL" shell-file-name)
    (setq explicit-shell-file-name shell-file-name)

    ;; This removes unsightly ^M characters that would otherwise
    ;; appear in the output of java applications.
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

    ;; explicitly set dictionary path
    (setq ispell-hunspell-dict-paths-alist
          `(("en_CA" ,(concat (file-name-as-directory cygwin-root) "usr/share/myspell/en_CA.aff"))
            ("en_US" ,(concat (file-name-as-directory cygwin-root) "usr/share/myspell/en_US.aff"))
            ("en_GB" ,(concat (file-name-as-directory cygwin-root) "usr/share/myspell/en_GB.aff"))
            ))

    ;; DESKTOP MOD (not tested on other plats
    ;; not sure why, but this was required after upgrading at some point.
    ;; hunspell was being called with -i NIL, instead of -i utf-8
    ;; ERROR MSG:
    ;; ispell-get-decoded-string: No data for dictionary "en_CA" in
    ;; ‘ispell-local-dictionary-alist’ or ‘ispell-dictionary-alist’
    (setq ispell-dictionary-alist
          '(("en_CA" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil
             ("-d" "en_CA") nil utf-8))
          )
    ))

#+END_SRC

*** PlantUML & Ditaa Diagramming (Java)
Look for Java JAR files, set variables if found.  Currently keep location
simple across all setups.  PlantUML requires graphviz, which can be
installed on Cygwin on Windows.

#+BEGIN_SRC emacs-lisp
(let* ((plantuml-filepath (file-name-concat my/user-dir "Apps" "PlantUML" "plantuml.jar"))
       (ditaa-filepath (file-name-concat my/user-dir "Apps" "Ditaa" "ditaa0_9.jar")))
  (when (file-readable-p plantuml-filepath)
    (setq org-plantuml-jar-path plantuml-filepath)
    (setq plantuml-default-exec-mode 'jar))
  (when (file-readable-p ditaa-filepath)
    (setq org-ditaa-jar-path ditaa-filepath))
  )
#+END_SRC

* Customize
#+BEGIN_SRC emacs-lisp
;; Keep any easy-customizations in a separate file
(setq custom-file
      (expand-file-name
       (concat user-emacs-directory "my-custom.el")))
(if (file-exists-p custom-file) (load custom-file))

;; Correct recent emacs defaults from python3
(setq python-shell-interpreter "python")
(setq python-interpreter "python")
#+END_SRC

* Finally
After environment setup is complete, do any remaining things like opening
files and setting key maps.

#+BEGIN_SRC emacs-lisp
;; Open a couple files and buffers
(let* ((org-init-file (concat my/user-dir "Projects/dotemacs/init.org"))
       (init-private-file (concat user-emacs-directory "init_private.el"))
       (org-work-file (concat my/org-directory "work.org"))
       (org-private-file (concat my/org-directory "private.org"))
       (my-time-format-string "%H:%M:%S:%3N"))

  (message "%s  START opening files and directories." (format-time-string my-time-format-string (current-time)))
  ;; org init file
  (when (file-exists-p org-init-file)
    (my/log-time-of-op-on-file 'find-file org-init-file my-time-format-string))

  ;; additional private .el file loaded by init
  (when (file-exists-p init-private-file)
    (my/log-time-of-op-on-file 'find-file init-private-file my-time-format-string))

  ;; ORG DIRECTORY FILES
  (when (and (file-exists-p my/org-directory)
             (file-directory-p my/org-directory))

    ;; dired *.org files in org directory
    (my/log-time-of-op-on-file 'dired my/org-directory my-time-format-string)

    ;; open different org file depedning on work/non-work PC
    (when (and my/on-work-pc
               (file-exists-p org-work-file))
      (my/log-time-of-op-on-file 'find-file org-work-file my-time-format-string))

    (when (and (not my/on-work-pc)
               (file-exists-p org-private-file))
      (my/log-time-of-op-on-file 'find-file org-private-file my-time-format-string)))

  (message "%s DONE opening files and directories.. " (format-time-string my-time-format-string (current-time))))

;; Reset garbage collection threshold
;; Recommended settings for performant lsp-mode, trying.
(message "%s Resetting garbage collector." (format-time-string "%H:%M:%S" (current-time)))
(setq gc-cons-threshold 100000000)      ;100MB
(when (boundp 'read-process-output-max)         ; Emacs27 req'd to support
  (setq read-process-output-max (* 1024 1024))) ; 1mb
#+END_SRC

** Keybindings
Navigating links and buttons easily and consistently between different special modes.

If moving this block before modes are initialized,
=(derived-mode-init-mode-variables 'Info-mode)= should be called before each
mapping.

#+BEGIN_SRC emacs-lisp :results output silent
;; l = back (last), r (reverse?) = forward

;; Info-mode
(derived-mode-init-mode-variables 'Info-mode)
(define-key Info-mode-map (kbd "u") 'Info-up)
(define-key Info-mode-map (kbd "j") 'Info-next-reference)
(define-key Info-mode-map (kbd "k") 'Info-prev-reference)

;; help-mode
(derived-mode-init-mode-variables 'help-mode)
(define-key help-mode-map (kbd "j") 'forward-button)
(define-key help-mode-map (kbd "k") 'backward-button)

;; apropos-mode
(derived-mode-init-mode-variables 'apropos-mode)
(define-key apropos-mode-map (kbd "j") 'forward-button)
(define-key apropos-mode-map (kbd "k") 'backward-button)

;; helpful-mode
(derived-mode-init-mode-variables 'helpful-mode)
(define-key helpful-mode-map (kbd "j") 'forward-button)
(define-key helpful-mode-map (kbd "k") 'backward-button)
#+END_SRC

* Notes

Benchmarking

#+begin_src emacs-lisp :tangle no
;; chunks to debug different lisp pieces
(benchmark-run
    (find-file-noselect (concat "c:/Users/steven.brown/" "Projects/dotemacs/init.org"))) ; (time gcs gc-time)

(let ((start-time (current-time)))
  (progn
    (message "Loading...")
    (require 'org-variable-pitch)
    (message (format "Loaded in %.2fs" (float-time (time-subtract (current-time) start-time))))
    ))
#+end_src

| Key       | What                                                |
|-----------+-----------------------------------------------------|
| C-c '     | narrow on code block in sibling window (and return) |
| C-c C-v t | tangle                                              |
| C-c C-v f | tangle into specific filename, like "init.el"       |
| C-c C-v n | org-babel-next-src-block                            |
| C-c C-v p | org-babel-previous-src-block                        |

*Converting from customize settings*:
: (custom-set-variables
:  '(my-variable value)
:  '(column-number-mode t)
:  ; ...
: )
:

-->

: (setq column-number-mode t)

Reference:

- emacs-lite: https://github.com/asimpson/dotfiles/blob/master/emacs/emacs-lite.org
- Alain Lafon emacs: https://github.com/munen/emacs.d \\
  (play emacs like an instrument talk)
- https://github.com/howardabrams/dot-files/blob/master/emacs-client.org \\
  sanityinc-tomorrow-theme
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua init.org]]
- https://www.masteringemacs.org/article/running-shells-in-emacs-overview \\
  You *must* set extra variables if customizing shell on Windows....
- https://github.com/daedreth/UncleDavesEmacs
- https://www.johndcook.com/blog/emacs_windows/#select \\
  Nicely written tips for emacs on Windows.
- https://github.com/emacs-tw/awesome-emacs Awesome Emacs \\
  Community list of useful packages.
- [[https://www.reddit.com/r/emacs/comments/5slhkb/what_is_your_preferred_setup_for_python/][Reddit Emacs Python setup]]
  - https://github.com/proofit404/company-anaconda
  - https://github.com/proofit404/anaconda-mode
- EMACS on a Windows USB key: https://gaballench.wordpress.com/2018/11/10/emacs-as-an-operating-system/
  - includes portable git, LaTeX, AUCTeX, Pandoc, markdown, customizations

# Local Variables:
# time-stamp-start: "Updated:[  ]+\\\\?[\"<]+"
# time-stamp-format: "%:y-%02m-%02d %02H:%02M:%02S"
# End:
